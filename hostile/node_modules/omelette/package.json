{
  "name": "omelette",
  "description": "Omelette.js Simple Autocompletion Helper for Node",
  "keywords": [
    "autocompletion",
    "complete",
    "bash completion",
    "zsh completion"
  ],
  "author": {
    "name": "Fatih Kadir Akın",
    "email": "fka@koding.com"
  },
  "version": "0.1.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/koding/kd/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "main": "./src/omelette.js",
  "homepage": "https://github.com/f/omelette",
  "bugs": {
    "url": "https://github.com/f/omelette/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/f/omelette.git"
  },
  "readme": "# Omelette.js v0.0.1\n\n```bash\nnpm install omelette\n```\n\nOmelette is a simple, template based autocompletion tool for Node projects.\n\nYou just have to decide your program name and CLI fragments.\n\n```coffeescript\nomelette \"githubber <module> <command> <suboption>\"\n```\n\nAnd you are almost done!\n\n![Example](https://raw.github.com/f/omelette/master/resources/omelette.gif)\n\n## Quickstart\n\nImplementing omelette is very easy.\n\n```coffeescript\n#!/usr/bin/env coffee\n\nomelette = require \"omelette\"\ncomp = omelette \"programname <firstargument>\"\n\ncomp.on \"firstargument\", ->\n  @reply [\"hello\", \"cruel\", \"world\"]\n\ncomp.init()\n```\n\n### Code\n\nIt's based on a simple CLI template.\n\nLet's think we have a executable file with the name **githubber**, *in a global path*.\n\nAnd in our program, code will be:\n\n```coffeescript\n#!/usr/bin/env coffee\n\nomelette = require \"omelette\"\n\n# Write your CLI template.\ncomplete = omelette \"githubber <action> <user> <repo>\"\n\n# Bind events for every template part.\ncomplete.on \"action\", -> @reply [\"clone\", \"update\", \"push\"]\n\ncomplete.on \"user\", (action)-> @reply fs.readdirSync \"/Users/\"\n\ncomplete.on \"repo\", (user)->\n  @reply [\n    \"http://github.com/#{user}/helloworld\"\n    \"http://github.com/#{user}/blabla\"\n  ]\n\n# Initialize the omelette.\ncomplete.init()\n\n# Rest is yours\nconsole.log \"Your program's default workflow.\"\nconsole.log process.argv\n```\n\nIf you like oldschool:\n\n```javascript\nvar fs = require(\"fs\"), \n    omelette = require(\"omelette\");\n\n// Write your CLI template.\nvar complete = omelette(\"githubber <action> <user> <repo>\");\n\ncomplete.on(\"action\", function() {\n  return this.reply([\"clone\", \"update\", \"push\"]);\n});\n\ncomplete.on(\"user\", function(action) {\n  return this.reply(fs.readdirSync(\"/Users/\"));\n});\n\ncomplete.on(\"repo\", function(user) {\n  return this.reply([\n    \"http://github.com/\" + user + \"/helloworld\", \n    \"http://github.com/\" + user + \"/blabla\"\n  ]);\n});\n\n// Initialize the omelette.\ncomplete.init();\n\n// Rest is yours.\nconsole.log(\"Your program's default workflow.\");\nconsole.log(process.argv);\n```\n\n`complete.reply` is the completion replier. You should pass the options into that method.\n\n### Install\n\nInstalling, and making your users install the autocompletion feature is very simple.\n\nIn **zsh**, you can write these:\n\n```bash\necho '. <(./githubber --completion)' >> .zshrc\n```\n\nIn **bash**, you should write:\n\n```bash\n./githubber --completion >> ~/githubber.completion.sh\necho 'source ~/githubber.completion.sh' >> .bash_profile\n```\n\nThat's all!\n\nNow you have an autocompletion system for your CLI tool.\n\n## Additions\n\nThere are some useful additions for omelette.\n\n### Parameters\n\nCallbacks have three parameters:\n\n  - The number of fragment *just for global event*\n  - The parent word.\n  - The whole command line buffer allow you to parse and reply as you wish.\n\n### Global Event\n\nYou also can be able to listen all fragments by \"complete\" event.\n\n```coffeescript\ncomplete.on \"complete\", (fragment, word, line)-> @reply [\"hello\", \"world\"]\n```\n\n### Numbered Arguments\n\nYou also can listen events by its order.\n\n```coffeescript\ncomplete.on \"$1\", (word, line)-> @reply [\"hello\", \"world\"]\n```\n\n## Test\n\nNow, you can try it in your shell.\n\n```bash\n$ ./githubber<tab>\nclone update push\n```\n\n```bash\n$ ./githubber cl<tab>\n$ ./githubber clone<tab>\nGuest fka\n```\n\n```bash\n$ ./githubber clone fka<tab>\n$ ./githubber clone fka http://github.com/fka/<tab>\nhttp://github.com/fka/helloworld\nhttp://github.com/fka/blabla\n```\n\n## Contribute\n\nI need your contributions to make that work better!\n\n## License\n\nThis project licensed under MIT.\n",
  "readmeFilename": "README.md",
  "_id": "omelette@0.1.0",
  "dist": {
    "shasum": "9c729f910c480edd4c4edbda5eecb7b11c3910bc"
  },
  "_from": "omelette@~0.1.0",
  "_resolved": "https://registry.npmjs.org/omelette/-/omelette-0.1.0.tgz"
}
